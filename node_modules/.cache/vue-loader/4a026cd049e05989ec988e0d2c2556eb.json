{"remainingRequest":"/home/geffting/workspace/desafio-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/geffting/workspace/desafio-frontend/src/pages/SearchContent.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/geffting/workspace/desafio-frontend/src/pages/SearchContent.vue","mtime":1620192257352},{"path":"/home/geffting/workspace/desafio-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/geffting/workspace/desafio-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/geffting/workspace/desafio-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/geffting/workspace/desafio-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBJbmZpbml0ZUxvYWRpbmcgZnJvbSAndnVlLWluZmluaXRlLWxvYWRpbmcnCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnU2VhcmNoQ29udGVudCcsCiAgY29tcG9uZW50czogewogICAgQm9va0NhcmQ6ICgpID0+IGltcG9ydCgnQC9jb21wb25lbnRzL0Jvb2tDYXJkLnZ1ZScpLAogICAgSW5maW5pdGVMb2FkaW5nCiAgfSwKICBjb21wdXRlZDogewogICAgYm9va0xpc3QoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmJvb2tMaXN0CiAgICB9LAogICAgYm9va0xpc3RMb2FkaW5nKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5ib29rTGlzdExvYWRpbmcKICAgIH0sCiAgICBzZWFyY2hQYXJhbXMoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLnNlYXJjaFBhcmFtcwogICAgfSwKICAgIHBhZ2U6IHsKICAgICAgc2V0KHZhbHVlKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdTRVRfUEFHRScsIHZhbHVlKQogICAgICB9LAogICAgICBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMucGFnZQogICAgICB9CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBhc3luYyBpbmZpbml0ZUhhbmRsZXIoc3RhdGUpIHsKICAgICAgdGhpcy5wYWdlICs9IDEKICAgICAgYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2dldEJvb2tMaXN0JywgdGhpcy5zZWFyY2hQYXJhbXMpCiAgICAgIHN0YXRlLmxvYWRlZCgpCiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["SearchContent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SearchContent.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <div>\n    <div class=\"content text-center mt-3\" v-if=\"bookListLoading\">\n      <font-awesome-icon icon=\"circle-notch\" spin />\n    </div>\n    <div class=\"content text-center mt-3\" v-else-if=\"bookList.length === 0\">\n      <span class=\"void-search\">No results for this search</span>\n    </div>\n    <div v-else class=\"search-content content\">\n      <book-card v-for=\"(book, index) of bookList\" :key=\"index\" :book=\"book\" />\n      <br />\n      <infinite-loading spinner=\"spiral\" @infinite=\"infiniteHandler\">\n        <div slot=\"no-more\">No more books for this search</div>\n      </infinite-loading>\n    </div>\n  </div>\n</template>\n\n<script>\nimport InfiniteLoading from 'vue-infinite-loading'\nexport default {\n  name: 'SearchContent',\n  components: {\n    BookCard: () => import('@/components/BookCard.vue'),\n    InfiniteLoading\n  },\n  computed: {\n    bookList() {\n      return this.$store.getters.bookList\n    },\n    bookListLoading() {\n      return this.$store.getters.bookListLoading\n    },\n    searchParams() {\n      return this.$store.getters.searchParams\n    },\n    page: {\n      set(value) {\n        this.$store.commit('SET_PAGE', value)\n      },\n      get() {\n        return this.$store.getters.page\n      }\n    }\n  },\n  methods: {\n    async infiniteHandler(state) {\n      this.page += 1\n      await this.$store.dispatch('getBookList', this.searchParams)\n      state.loaded()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.search-content {\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  gap: 10px 15px;\n  margin-top: 42px;\n\n  .infinite-loading-container {\n    width: 100%;\n    margin: 30px 0;\n    font-style: italic;\n    font-size: 14px;\n  }\n}\n\n.void-search {\n  font-size: 14px;\n  font-style: italic;\n}\n</style>"]}]}